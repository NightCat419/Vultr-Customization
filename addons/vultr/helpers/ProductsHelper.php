<?php

namespace MGModule\vultr\helpers;

use WHMCS\Database\Capsule as DB;

use MGModule\vultr\helpers\ApiHelper;

/**
 * @author Mateusz PawÅ‚owski <mateusz.pa@modulesgarden.com>
 */
class ProductsHelper {
    

    public static function configurableOptions($productID) {
//        logModuleCall('Vultr Addon', 'configurableOptions', 'start', '1', '2', '3');

        $vultrAPI = ApiHelper::getAPI();
        if ($vultrAPI->checkConnection()) {
            return self::prepareConfigurableOptions($vultrAPI, $productID);
        } else {
            return array('status' => FALSE, 'message' => 'connectiong problem');
        }
    }

    public static function getProductConfigOptions($productID, $field = 'all', $default = '') {
        $result = DB::table('tblproducts')->where('id', $productID)->first();
        if ($field == 'all') {
            return $result;
        } else {
            if (isset($result->{$field})) {
                return $result->{$field};
            } else {
                return $default;
            }
        }
    }

    private static function prepareConfigurableOptions($vultrAPI, $productID) {
        $checkIsset = DB::table('tblproductconfiglinks')->where('pid', $productID)->get();

        if ($checkIsset) {
            return array('status' => false, 'message' => 'Product configurable options already exist!');
        }
        
        
        $productConfigGroupID = DB::table('tblproductconfiggroups')->insertGetId(array('name' => 'Vultr', 'description' => 'Autogenerated Vultr #' . $productID . ' Configurable Options'));
        DB::table('tblproductconfiglinks')->insert(array('gid' => $productConfigGroupID, 'pid' => $productID));
        
        $autoBackupID = DB::table('tblproductconfigoptions')->insertGetId(array('gid' => $productConfigGroupID, 'optionname' => 'auto_backups|Auto backups', 'optiontype' => '3'));
        $autoBackupSubOptionID = DB::table('tblproductconfigoptionssub')->insertGetId(array('configid' => $autoBackupID, 'optionname' => 'Yes'));
        //Add pricing for autobackups configoptions
        self::insertSubOptionsPricing($autoBackupSubOptionID);

        
//        $snapshotID = DB::table('tblproductconfigoptions')->insertGetId(array('gid' => $productConfigGroupID, 'optionname' => 'snapshots|Snapshots limit', 'optiontype' => '4', 'qtyminimum' => '0', 'qtymaximum' => '10'));
//        $snapshotSubOptionID = DB::table('tblproductconfigoptionssub')->insertGetId(array('configid' => $snapshotID, 'optionname' => '1'));
//        //Add pricing for snapshots configoption
//        self::insertSubOptionsPricing($snapshotSubOptionID);

        $osID = DB::table('tblproductconfigoptions')->insertGetId(array('gid' => $productConfigGroupID, 'optionname' => 'os_type|OS Type', 'optiontype' => '1'));

        foreach ($vultrAPI->os_list() as $value) {
//            if($value['name'] == "Backup")
//                continue;
//            if ($value['name'] == "Custom")
//                $value['name'] = "ISO";
            if($value['name'] != "Snapshot")
                continue;
            $osSubOptionID = DB::table('tblproductconfigoptionssub')->insertGetId(array('configid' => $osID, 'optionname' => $value['OSID'] . '|' . $value['name']));

            //Add pricing for operating system configoption
            self::insertSubOptionsPricing($osSubOptionID);

        }


        $locationID = DB::table('tblproductconfigoptions')->insertGetId(array('gid' => $productConfigGroupID, 'optionname' => 'location|Location', 'optiontype' => '1'));
        foreach ($vultrAPI->regions_list() as $value) {
            $locationSubOptionID = DB::table('tblproductconfigoptionssub')->insertGetId(array('configid' => $locationID, 'optionname' => $value['DCID'] . '|' . $value['name'].'('.$value['country'].')'));
             //Add pricing for application configoption
             self::insertSubOptionsPricing($locationSubOptionID);

        }

        $productSnapshots = DB::table('tblproducts')->where('id', $productID)->get();
//        logModuleCall('Vultr Addon', 'ProductsHelper', 'prepareConfigurableOptions', '1', $productSnapshots[0]->configoption3);
        $productSnapshots = json_decode($productSnapshots[0]->configoption3);

        $snapshotSelectID = DB::table('tblproductconfigoptions')->insertGetId(array('gid' => $productConfigGroupID, 'optionname' => 'snapshot_select|Snapshot', 'optiontype' => '1'));
        $snapshotOptionId = DB::table('tblproductconfigoptionssub')->insertGetId(array('configid' => $snapshotSelectID, 'optionname' => '0|None'));
        self::insertSubOptionsPricing($snapshotOptionId);
        $snapshots = $vultrAPI->snapshot_list();
        foreach ($productSnapshots as $value) {
            $snapshotId = DB::table('tblproductconfigoptionssub')->insertGetId(array('configid' => $snapshotSelectID, 'optionname' => $value . '|' . $snapshots[$value]['description']));
            self::insertSubOptionsPricing($snapshotId);
        }

        return array('status' => true, 'reload' => true, 'message' => 'success');
    }
    
    private static function insertSubOptionsPricing($subOptionId) {
            //Getting all available currencies
        $currencies = DB::table('tblcurrencies')->select("tblcurrencies.id")->get();
        foreach($currencies as $value) {
                DB::table('tblpricing')->insert(array(
                    'type' => "configoptions", 
                    'currency' => $value->id, 
                    'relid' => $subOptionId
                    ));
            }
    }

    public static function customFields($productID) {
        $result = DB::table('tblcustomfields')->where('fieldname', 'subid|Virtual machine ID')->where('type', 'product')->where('relid', $productID)->select('id')->get();
        if (!$result) {
            DB::table('tblcustomfields')->insert(array('type' => 'product', 'relid' => $productID, 'fieldname' => 'subid|Virtual machine ID', 'fieldtype' => 'text', 'adminonly' => 'on'));
            return array('status' => true, 'reload' => true, 'message' => 'success');
        }
        return array('status' => true, 'message' => 'success');
    }

}
